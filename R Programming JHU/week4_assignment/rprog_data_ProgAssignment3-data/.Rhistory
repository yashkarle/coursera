install.packages("swirl")
packageVersion("swirl")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
exit()
q()
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
virginica <- filter(iris, species == "virginica")
virginica <- filter(iris, species == "Virginica")
virginica <- filter(iris, Species == "Virginica")
virginica <- filter(iris, Species == "virginica")
View(iris)
iris
virginica <- filter(iris, Species == "virginica")
virginica <- filter(iris, 'Species' == "virginica")
virginica <- iris[iris$Species == 'virginica',]
mean(virginica$Sepal.Length)
test <- apply(iris, 2, mean)
test <- colMeans(iris)
test <- apply(iris[,1:4], 2, mean)
test
test <- apply(iris[,1:4], 1, mean)
test
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars$cyl
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
deubg(ls)
ls
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
x = numeric()
x
x <<- 9
x
x <<- c(9,10)
x
x <- makeCacheMatrix(c[1:10])
View(x)
x
val_x <- x$get()
val_x <- x.get()
View(x[["get"]])
val_x <- x.get()
val_x <- x[["get"]]
val_x()
val_x
mean_x <- cacheSolve(x)
mean_x <- cacheSolve()
mean_x <- cacheSolve(c[1:10])
mean_x <- cacheSolve(3)
mean_x <- cacheSolve(c(9,10))
x
mean_x <- cacheSolve(x)
x <- makeCacheMatrix(c(61, 4, 21, 67, 89, 2))
mean_x <- cacheSolve(x)
mean_x
x
x$getmean()
mean_x <- cacheSolve(x)
y <- makeCacheMatrix(c(61, 4, 22, 67, 89, 2))
y$get()
y$set()
y$getmean()
mean_y <- cacheSolve(y)
y$getmean()
mean_y <- cacheSolve(y)
?solve
print(matrix(5, 3, 3))
print(diag(c(5, 3, 3), 3, 3))
print(diag(1, 3, 3))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()
x
setInverse <- function(inverse)
inv <<- inverse
getInverse <- function()
inv
list(
set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse
)
}
matrxi_x = makeCacheMatrix(diag(1, 3, 3))
matrxi_x$get()
matrxi_x$getInverse()
inv_x = cacheSolve(matrxi_x)
inv_x
matrxi_x$get()
matrxi_x$getInverse()
inv_x = cacheSolve(matrxi_x)
matrxi_x = makeCacheMatrix(diag(c(5, 3, 3), 3, 3))
inv_x = cacheSolve(matrxi_x)
inv_x
matrxi_x
matrxi_x$get()
inv_x
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
setwd("~/coursera/R Programming JHU/week4_assignment/rprog_data_ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
View(outcome)
outcome
state="BB"
if (!(state %in% outcome$State)) {}
if (!(state %in% outcome$State)) {
stop("invalid state")
}
outcome <- 'hert attack'
if (!(outcome %in% outcome$State)) {
stop("invalid outcome")
}
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome_data)
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
outcome <- 'heart attack'
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
state="NY"
if (!(state %in% outcome$State)) {
stop("invalid state")
}
if (!(outcome %in% outcome_date$State)) {
stop("invalid outcome")
}
if (!(outcome %in% outcome_data$State)) {
stop("invalid outcome")
}
if (!(state %in% outcome_data$State)) {
stop("invalid state")
}
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
if (!(outcome %in% names(valid_outcomes))) {
stop("invalid outcome")
}
outcome <- 'heart attach'
if (!(outcome %in% names(valid_outcomes))) {
stop("invalid outcome")
}
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Return hospital name in that state with lowest 30-day death rate
testDf <- outcomeData[outcomeData$State == state, valid_outcomes[outcome]]
valid_outcomes[outcome]
outcome <- 'heart attack\'
outcome <- 'heart attack'
valid_outcomes[outcome]
## Return hospital name in that state with lowest 30-day death rate
testDf <- outcomeData[outcomeData$State == state, valid_outcomes[outcome]]
## Return hospital name in that state with lowest 30-day death rate
testDf <- outcomeData[outcomeData$State == state,]
## Return hospital name in that state with lowest 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
stateOutcomeData[which.max(stateOutcomeData$State),]
stateOutcomeData[which.min(stateOutcomeData$state),]
stateOutcomeData[which.min(stateOutcomeData[state]),]
stateOutcomeData[which.min(stateOutcomeData[outcome]),]
stateOutcomeData[which.min(stateOutcomeData$outcome),]
outcome_column <- valid_outcomes[outcome]
stateOutcomeData[which.min(stateOutcomeData[outcome_column]),]
stateOutcomeData[which.min(stateOutcomeData[[outcome_column]]),]
stateOutcomeData[outcome_column]
stateOutcomeData[[outcome_column]]
stateOutcomeData[[outcome_column[0]]]
stateOutcomeData[[outcome_column[1]]]
stateOutcomeData[[outcome_column[[1]]]
]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData[which.min(stateOutcomeData[[outcome_column]]),]
stateOutcomeData[which.min(stateOutcomeData[[outcome_column]]),2]
best <- function(state, outcome) {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!(state %in% outcome_data$State)) {
stop("invalid state")
}
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
if (!(outcome %in% names(valid_outcomes))) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData[which.min(stateOutcomeData[[outcome_column]]),2]
}
View(best)
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!(state %in% outcomeData$State)) {
stop("invalid state")
}
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
if (!(outcome %in% names(valid_outcomes))) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData[which.min(stateOutcomeData[[outcome_column]]),2]
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
## Return hospital name in that state with the given rank
## 30-day death rate
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state = "TX"
outcome = "heart attack"
outcome = "heart failure"
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
## Return hospital name in that state with the given rank 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData$rank <- NA
stateOutcomeData$rank[order.outcome_column] <- 1:nrow(stateOutcomeData)
stateOutcomeData %>% arrange(outcome_column)
library("dplyr")
install.packages("dplyr")
library("dplyr")
stateOutcomeData %>% arrange(outcome_column)
stateOutcomeData %>% arrange
stateOutcomeData %>% arrange %>% mutate(rank=rank(outcome_column))
stateOutcomeData %>% mutate(rank=dense_rank(outcome_column))
stateOutcomeData % > % mutate(rank=dense_rank(desc(-outcome_column)))
stateOutcomeData %>% mutate(rank=dense_rank(desc(-outcome_column)))
stateOutcomeData$Rank<-rank(stateOutcomeData[[outcome_column]])
View(outcomeData)
View(stateOutcomeData)
stateOutcomeData$Rank<-dense_rank(stateOutcomeData[[outcome_column]])
View(stateOutcomeData)
## Return hospital name in that state with the given rank 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
stateOutcomeData <- stateOutcomeData[order(stateOutcomeData[[outcome_column]], stateOutcomeData$Hospital.Name), ]
View(stateOutcomeData)
mutate(stateOutcomeData, row_num=row_number())
stateOutcomeData <- mutate(stateOutcomeData, row_num=row_number())
View(stateOutcomeData)
num <- 1
stateOutcomeData[num, ]['Hospital.Name']
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
state = "TX"
outcome = "heart failure"
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
## Return hospital name in that state with the given rank 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData <- stateOutcomeData[order(stateOutcomeData[[outcome_column]], stateOutcomeData$Hospital.Name), ]
stateOutcomeData <- mutate(stateOutcomeData, row_num=row_number())
View(stateOutcomeData)
stateOutcomeData <- stateOutcomeData[order(as.numeric(stateOutcomeData[[outcome_column]]), stateOutcomeData$Hospital.Name), ]
View(stateOutcomeData)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
state = "MD"
outcome = "heart attack"
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
## Return hospital name in that state with the given rank 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData <- stateOutcomeData[order(as.numeric(stateOutcomeData[[outcome_column]]), stateOutcomeData$Hospital.Name), ]
stateOutcomeData <- mutate(stateOutcomeData, row_num=row_number())
View(stateOutcomeData)
## Return hospital name in that state with the given rank 30-day death rate
stateOutcomeData <- outcomeData[outcomeData$State == state,]
stateOutcomeData <- stateOutcomeData[order(as.numeric(stateOutcomeData[[outcome_column]]), stateOutcomeData$Hospital.Name), ]
stateOutcomeData <- mutate(stateOutcomeData, row_num=row_number())
View(stateOutcomeData)
stateOutcomeData <- stateOutcomeData[!(stateOutcomeData[[outcome_column]]=="Not Available"),]
stateOutcomeData[num, ]['Hospital.Name']
num = "worst"
if (num == "worst") {
num <- nrow(stateOutcomeData)
}
stateOutcomeData[num, ]['Hospital.Name']
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
valid_outcomes <- list (
"heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
)
if (!(outcome %in% names(valid_outcomes))) {
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
outcome_column_list <- valid_outcomes[outcome]
outcome = "heart attack"
## For each state, find the hospital of the given rank
outcome_column_list <- valid_outcomes[outcome]
outcome_column <- outcome_column_list[[1]]
stateOutcomeData <- stateOutcomeData[order(stateOutcomeData$State, as.numeric(stateOutcomeData[[outcome_column]]), stateOutcomeData$Hospital.Name), ]
outcomeData <- outcomeData[order(outcomeData$State, as.numeric(outcomeData[[outcome_column]]), outcomeData$Hospital.Name), ]
outcomeData <- outcomeData[!(outcomeData[[outcome_column]]=="Not Available"),]
View(outcomeData)
outcomeData %>% group_by(State) %>% mutate(id=row_number())
View(outcomeData)
View(outcomeData)
outcomeData <- outcomeData %>% group_by(State) %>% mutate(id=row_number())
View(outcomeData)
num <- n()
num = 1
rankedOutcomeData <- outcomeData %>% group_by(State) %>% mutate(id=row_number()) %>% filter(row_number()==num)
View(rankedOutcomeData)
rankedOutcomeData <- outcomeData %>% group_by(State) %>% mutate(id=row_number()) %>% filter(row_number()==n())
View(rankedOutcomeData)
## Return a data frame with the hospital names and the (abbreviated) state name
rankedOutcomeData['Hospital.Name']
## Return a data frame with the hospital names and the (abbreviated) state name
rankedOutcomeData['Hospital.Name', 'State']
## Return a data frame with the hospital names and the (abbreviated) state name
rankedOutcomeData %>% select(Hospital.Name, State)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("best.R")
source("rankhospital.R")
source("rankall.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)as.character(subset(r, state == "HI")$hospital)
View(r)
as.character(subset(r, State == "HI")$hospital)
as.character(subset(r, State == "HI")$Hospital.Nane)
as.character(subset(r, State == "HI")$Hospital.Name)
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ")$Hospital.Name)
r <- rankall("heart failure", 10)
as.character(subset(r, State == "NV")$Hospital.Name)
